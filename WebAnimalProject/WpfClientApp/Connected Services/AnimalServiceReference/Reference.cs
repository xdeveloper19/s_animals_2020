//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfClientApp.AnimalServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AnimalServiceReference.IWCFAnimalService")]
    public interface IWCFAnimalService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFAnimalService/AddAnimal", ReplyAction="http://tempuri.org/IWCFAnimalService/AddAnimalResponse")]
        bool AddAnimal(string name, int age, double weight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFAnimalService/AddAnimal", ReplyAction="http://tempuri.org/IWCFAnimalService/AddAnimalResponse")]
        System.Threading.Tasks.Task<bool> AddAnimalAsync(string name, int age, double weight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFAnimalService/AddMammal", ReplyAction="http://tempuri.org/IWCFAnimalService/AddMammalResponse")]
        bool AddMammal(string name, double temp, bool isIswimming);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFAnimalService/AddMammal", ReplyAction="http://tempuri.org/IWCFAnimalService/AddMammalResponse")]
        System.Threading.Tasks.Task<bool> AddMammalAsync(string name, double temp, bool isIswimming);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFAnimalService/AddAtri", ReplyAction="http://tempuri.org/IWCFAnimalService/AddAtriResponse")]
        bool AddAtri(string name, int h_count, bool isRum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFAnimalService/AddAtri", ReplyAction="http://tempuri.org/IWCFAnimalService/AddAtriResponse")]
        System.Threading.Tasks.Task<bool> AddAtriAsync(string name, int h_count, bool isRum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFAnimalService/AddBird", ReplyAction="http://tempuri.org/IWCFAnimalService/AddBirdResponse")]
        bool AddBird(string name, AnimalsEntity.Color wings, bool isTalking);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFAnimalService/AddBird", ReplyAction="http://tempuri.org/IWCFAnimalService/AddBirdResponse")]
        System.Threading.Tasks.Task<bool> AddBirdAsync(string name, AnimalsEntity.Color wings, bool isTalking);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFAnimalService/GetAnimals", ReplyAction="http://tempuri.org/IWCFAnimalService/GetAnimalsResponse")]
        AnimalsEntity.Animal[] GetAnimals();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFAnimalService/GetAnimals", ReplyAction="http://tempuri.org/IWCFAnimalService/GetAnimalsResponse")]
        System.Threading.Tasks.Task<AnimalsEntity.Animal[]> GetAnimalsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFAnimalService/GetMammals", ReplyAction="http://tempuri.org/IWCFAnimalService/GetMammalsResponse")]
        AnimalsEntity.Mammal[] GetMammals();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFAnimalService/GetMammals", ReplyAction="http://tempuri.org/IWCFAnimalService/GetMammalsResponse")]
        System.Threading.Tasks.Task<AnimalsEntity.Mammal[]> GetMammalsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFAnimalService/GetArti", ReplyAction="http://tempuri.org/IWCFAnimalService/GetArtiResponse")]
        AnimalsEntity.Artiodactyls[] GetArti();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFAnimalService/GetArti", ReplyAction="http://tempuri.org/IWCFAnimalService/GetArtiResponse")]
        System.Threading.Tasks.Task<AnimalsEntity.Artiodactyls[]> GetArtiAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFAnimalService/GetBirds", ReplyAction="http://tempuri.org/IWCFAnimalService/GetBirdsResponse")]
        AnimalsEntity.Bird[] GetBirds();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFAnimalService/GetBirds", ReplyAction="http://tempuri.org/IWCFAnimalService/GetBirdsResponse")]
        System.Threading.Tasks.Task<AnimalsEntity.Bird[]> GetBirdsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFAnimalService/RemoveAnimals", ReplyAction="http://tempuri.org/IWCFAnimalService/RemoveAnimalsResponse")]
        bool RemoveAnimals();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFAnimalService/RemoveAnimals", ReplyAction="http://tempuri.org/IWCFAnimalService/RemoveAnimalsResponse")]
        System.Threading.Tasks.Task<bool> RemoveAnimalsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFAnimalService/RemoveMammals", ReplyAction="http://tempuri.org/IWCFAnimalService/RemoveMammalsResponse")]
        bool RemoveMammals();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFAnimalService/RemoveMammals", ReplyAction="http://tempuri.org/IWCFAnimalService/RemoveMammalsResponse")]
        System.Threading.Tasks.Task<bool> RemoveMammalsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFAnimalService/RemoveArti", ReplyAction="http://tempuri.org/IWCFAnimalService/RemoveArtiResponse")]
        bool RemoveArti();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFAnimalService/RemoveArti", ReplyAction="http://tempuri.org/IWCFAnimalService/RemoveArtiResponse")]
        System.Threading.Tasks.Task<bool> RemoveArtiAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFAnimalService/RemoveBirds", ReplyAction="http://tempuri.org/IWCFAnimalService/RemoveBirdsResponse")]
        bool RemoveBirds();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFAnimalService/RemoveBirds", ReplyAction="http://tempuri.org/IWCFAnimalService/RemoveBirdsResponse")]
        System.Threading.Tasks.Task<bool> RemoveBirdsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWCFAnimalServiceChannel : WpfClientApp.AnimalServiceReference.IWCFAnimalService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WCFAnimalServiceClient : System.ServiceModel.ClientBase<WpfClientApp.AnimalServiceReference.IWCFAnimalService>, WpfClientApp.AnimalServiceReference.IWCFAnimalService {
        
        public WCFAnimalServiceClient() {
        }
        
        public WCFAnimalServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WCFAnimalServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WCFAnimalServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WCFAnimalServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddAnimal(string name, int age, double weight) {
            return base.Channel.AddAnimal(name, age, weight);
        }
        
        public System.Threading.Tasks.Task<bool> AddAnimalAsync(string name, int age, double weight) {
            return base.Channel.AddAnimalAsync(name, age, weight);
        }
        
        public bool AddMammal(string name, double temp, bool isIswimming) {
            return base.Channel.AddMammal(name, temp, isIswimming);
        }
        
        public System.Threading.Tasks.Task<bool> AddMammalAsync(string name, double temp, bool isIswimming) {
            return base.Channel.AddMammalAsync(name, temp, isIswimming);
        }
        
        public bool AddAtri(string name, int h_count, bool isRum) {
            return base.Channel.AddAtri(name, h_count, isRum);
        }
        
        public System.Threading.Tasks.Task<bool> AddAtriAsync(string name, int h_count, bool isRum) {
            return base.Channel.AddAtriAsync(name, h_count, isRum);
        }
        
        public bool AddBird(string name, AnimalsEntity.Color wings, bool isTalking) {
            return base.Channel.AddBird(name, wings, isTalking);
        }
        
        public System.Threading.Tasks.Task<bool> AddBirdAsync(string name, AnimalsEntity.Color wings, bool isTalking) {
            return base.Channel.AddBirdAsync(name, wings, isTalking);
        }
        
        public AnimalsEntity.Animal[] GetAnimals() {
            return base.Channel.GetAnimals();
        }
        
        public System.Threading.Tasks.Task<AnimalsEntity.Animal[]> GetAnimalsAsync() {
            return base.Channel.GetAnimalsAsync();
        }
        
        public AnimalsEntity.Mammal[] GetMammals() {
            return base.Channel.GetMammals();
        }
        
        public System.Threading.Tasks.Task<AnimalsEntity.Mammal[]> GetMammalsAsync() {
            return base.Channel.GetMammalsAsync();
        }
        
        public AnimalsEntity.Artiodactyls[] GetArti() {
            return base.Channel.GetArti();
        }
        
        public System.Threading.Tasks.Task<AnimalsEntity.Artiodactyls[]> GetArtiAsync() {
            return base.Channel.GetArtiAsync();
        }
        
        public AnimalsEntity.Bird[] GetBirds() {
            return base.Channel.GetBirds();
        }
        
        public System.Threading.Tasks.Task<AnimalsEntity.Bird[]> GetBirdsAsync() {
            return base.Channel.GetBirdsAsync();
        }
        
        public bool RemoveAnimals() {
            return base.Channel.RemoveAnimals();
        }
        
        public System.Threading.Tasks.Task<bool> RemoveAnimalsAsync() {
            return base.Channel.RemoveAnimalsAsync();
        }
        
        public bool RemoveMammals() {
            return base.Channel.RemoveMammals();
        }
        
        public System.Threading.Tasks.Task<bool> RemoveMammalsAsync() {
            return base.Channel.RemoveMammalsAsync();
        }
        
        public bool RemoveArti() {
            return base.Channel.RemoveArti();
        }
        
        public System.Threading.Tasks.Task<bool> RemoveArtiAsync() {
            return base.Channel.RemoveArtiAsync();
        }
        
        public bool RemoveBirds() {
            return base.Channel.RemoveBirds();
        }
        
        public System.Threading.Tasks.Task<bool> RemoveBirdsAsync() {
            return base.Channel.RemoveBirdsAsync();
        }
    }
}
